import numpy as np
import pandas as pd
import xgboost as xgb
from sklearn.metrics import mean_absolute_error, mean_squared_error
from statsmodels.tsa.vector_ar.var_model import VAR
from statsmodels.tsa.stattools import adfuller
import matplotlib.pyplot as plt
from pandas.tseries.offsets import Week
import warnings

warnings.filterwarnings('ignore')

def combined_forecast_impute(df, target_cols, steps_ahead=6, test_size=0.05, maxlags=12):
    # --- Helper functions ---
    def create_time_features(df, date_col):
        df = df.copy()
        df[date_col] = pd.to_datetime(df[date_col])
        df = df.set_index(date_col)
        df['month'] = df.index.month
        df['quarter'] = df.index.quarter
        df['week'] = df.index.isocalendar().week
        df['day_of_week'] = df.index.dayofweek
        df['day_of_month'] = df.index.day
        df['year'] = df.index.year
        df['month_sin'] = np.sin(2 * np.pi * df['month'] / 12)
        df['month_cos'] = np.cos(2 * np.pi * df['month'] / 12)
        df['week_sin'] = np.sin(2 * np.pi * df['week'] / 52)
        df['week_cos'] = np.cos(2 * np.pi * df['week'] / 52)
        df['is_month_end'] = df.index.is_month_end.astype(int)
        df['is_quarter_end'] = df.index.is_quarter_end.astype(int)
        df['is_year_end'] = df.index.is_year_end.astype(int)
        return df

    def create_lag_features(df, cols, lags=[1,2,3,4,12]):
        df = df.copy()
        for col in cols:
            if col in df.columns:
                for lag in lags:
                    df[f'{col}_lag_{lag}'] = df[col].shift(lag)
                for win in [3,6,12]:
                    df[f'{col}_roll_{win}'] = df[col].rolling(win).mean()
                df[f'{col}_pct_change'] = df[col].pct_change().replace([np.inf, -np.inf], np.nan)
                df[f'{col}_diff'] = df[col].diff()
        return df

    def check_stationarity(series):
        result = adfuller(series.dropna())
        return result[1] < 0.05

    def prepare_var_data(df, target_cols):
        var_data = df[target_cols].copy()
        for col in target_cols:
            if not check_stationarity(var_data[col]):
                var_data[f'{col}_diff'] = var_data[col].diff()
                print(f"Applied differencing to {col}")
        return var_data.dropna()

    # --- Prepare Features ---
    df_features = create_time_features(df, 'ds')
    df_features = create_lag_features(df_features, target_cols)
    # Drop rows with NaNs in target_cols to avoid training issues
    df_features = df_features.dropna(subset=target_cols)

    # Define feature columns for XGBoost (exclude target_cols and their diffs)
    feature_cols = [
        col for col in df_features.columns 
        if col not in target_cols and not col.endswith('_diff')
    ]

    # Train/test split
    split_idx = int(len(df_features) * (1 - test_size))
    train_data = df_features.iloc[:split_idx]
    test_data = df_features.iloc[split_idx:]

    # --- Train XGBoost models for each target column ---
    xgb_models = {}
    xgb_results = {}

    for col in target_cols:
        print(f"Training XGBoost for {col} imputation/forecasting...")
        X_train = train_data[feature_cols].replace([np.inf, -np.inf], np.nan).fillna(0)
        y_train = train_data[col].fillna(0)
        X_test = test_data[feature_cols].replace([np.inf, -np.inf], np.nan).fillna(0)
        y_test = test_data[col].fillna(0)

        model = xgb.XGBRegressor(
            n_estimators=100, max_depth=6, learning_rate=0.1, subsample=0.8, colsample_bytree=0.8, random_state=42
        )
        model.fit(X_train, y_train)
        xgb_models[col] = model

        y_pred = model.predict(X_test)
        mae = mean_absolute_error(y_test, y_pred)
        rmse = np.sqrt(mean_squared_error(y_test, y_pred))
        xgb_results[col] = {'MAE': mae, 'RMSE': rmse, 'Feature_Importance': dict(zip(feature_cols, model.feature_importances_))}

        # Plot test actual vs predicted
        plt.figure(figsize=(10,4))
        plt.plot(y_test.index, y_test.values, label='Actual', marker='o')
        plt.plot(y_test.index, y_pred, label='Predicted', marker='x')
        plt.title(f"Actual vs Predicted for {col} (Test Set)")
        plt.xlabel("Date")
        plt.ylabel(col)
        plt.legend()
        plt.grid(True)
        plt.tight_layout()
        plt.show()

    # --- Train VAR model ---
    var_available = False
    try:
        var_data = prepare_var_data(df, target_cols)
        var_model = VAR(var_data)
        var_fit = var_model.fit(maxlags=maxlags, ic='aic')
        print(f"VAR model fitted with {var_fit.k_ar} lags")
        print(f"AIC: {var_fit.aic}")
        var_available = True
    except Exception as e:
        print(f"VAR fitting failed: {e}")
        var_fit = None

    # --- Forecasting ---
    # Prepare the last row for multi-step XGBoost forecasting
    last_row = df_features.iloc[-1:].copy()

    forecasts_xgb = {col: [] for col in target_cols}

    for step in range(steps_ahead):
        step_forecast = {}
        for col in target_cols:
            X_pred = last_row[feature_cols].replace([np.inf, -np.inf], np.nan).fillna(0)
            pred = xgb_models[col].predict(X_pred)[0]
            step_forecast[col] = pred
            last_row[col] = pred
        # Update lag features in last_row for next step
        for col in target_cols:
            for lag in [1,2,3,4,12]:
                last_row[f'{col}_lag_{lag}'] = last_row[col]
            for win in [3,6,12]:
                last_row[f'{col}_roll_{win}'] = last_row[col]
            last_row[f'{col}_pct_change'] = 0
        # Append forecasts
        for col in target_cols:
            forecasts_xgb[col].append(step_forecast[col])

    # VAR forecasting
    if var_available:
        try:
            var_forecasts = var_fit.forecast(var_fit.y, steps=steps_ahead)
        except Exception as e:
            print(f"VAR forecasting failed: {e}")
            var_available = False

    # Combine forecasts by averaging when VAR is available
    combined_forecasts = {}
    if var_available:
        for i, col in enumerate(target_cols):
            xgb_vals = forecasts_xgb[col]
            var_vals = var_forecasts[:, i]
            combined_forecasts[col] = [(x + v)/2 for x, v in zip(xgb_vals, var_vals)]
    else:
        combined_forecasts = forecasts_xgb

    # Convert combined forecasts to DataFrame indexed by future dates
    last_date = pd.to_datetime(df_features.index[-1])
    future_dates = pd.date_range(start=last_date + Week(1, weekday=4), periods=steps_ahead, freq='W-FRI')
    forecast_df = pd.DataFrame(combined_forecasts, index=future_dates)

    # --- Plot full series + forecast ---
    for col in target_cols:
        plt.figure(figsize=(10, 4))
        plt.plot(df[col], label='Historical', marker='o')
        plt.plot(forecast_df.index, forecast_df[col], label='Forecast', marker='x')
        plt.axvline(x=df.index[-1], color='red', linestyle='--', label='Forecast Start')
        plt.title(f"{col}: Historical + Forecast")
        plt.xlabel("Date")
        plt.ylabel(col)
        plt.legend()
        plt.grid(True)
        plt.tight_layout()
        plt.show()

    return forecast_df, xgb_results

