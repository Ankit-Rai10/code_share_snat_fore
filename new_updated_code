import pandas as pd
import numpy as np
from sklearn.metrics import mean_absolute_error, mean_squared_error
import xgboost as xgb
from statsmodels.tsa.vector_ar.var_model import VAR
from statsmodels.tsa.stattools import adfuller
import warnings
warnings.filterwarnings('ignore')

def pharma_forecast(df, target_cols, steps_ahead=6, test_size=0.2, maxlags=12):
    # --- Helper functions ---
    def create_time_features(df, date_col):
        df = df.copy()
        df[date_col] = pd.to_datetime(df[date_col])
        df = df.set_index(date_col)
        df['month'] = df.index.month
        df['quarter'] = df.index.quarter
        df['week'] = df.index.isocalendar().week
        df['day_of_week'] = df.index.dayofweek
        df['day_of_month'] = df.index.day
        df['year'] = df.index.year
        df['month_sin'] = np.sin(2 * np.pi * df['month'] / 12)
        df['month_cos'] = np.cos(2 * np.pi * df['month'] / 12)
        df['week_sin'] = np.sin(2 * np.pi * df['week'] / 52)
        df['week_cos'] = np.cos(2 * np.pi * df['week'] / 52)
        df['is_month_end'] = df.index.is_month_end.astype(int)
        df['is_quarter_end'] = df.index.is_quarter_end.astype(int)
        df['is_year_end'] = df.index.is_year_end.astype(int)
        return df

    def create_lag_features(df, target_cols, lags=[1, 2, 3, 4, 12]):
        df = df.copy()
        for col in target_cols:
            if col in df.columns:
                for lag in lags:
                    df[f'{col}_lag_{lag}'] = df[col].shift(lag)
                df[f'{col}_roll_3'] = df[col].rolling(3).mean()
                df[f'{col}_roll_6'] = df[col].rolling(6).mean()
                df[f'{col}_roll_12'] = df[col].rolling(12).mean()
                df[f'{col}_pct_change'] = df[col].pct_change()
                df[f'{col}_diff'] = df[col].diff()
        return df

    def check_stationarity(series):
        result = adfuller(series.dropna())
        return result[1] < 0.05

    def prepare_var_data(df, target_cols):
        var_data = df[target_cols].copy()
        for col in target_cols:
            if not check_stationarity(var_data[col]):
                var_data[f'{col}_diff'] = var_data[col].diff()
                print(f"Applied differencing to {col}")
        return var_data.dropna()

    # --- XGBoost Training ---
    df_features = create_time_features(df, df.index.name or 'date')
    df_features = create_lag_features(df_features, target_cols)
    feature_cols = [col for col in df_features.columns if col not in target_cols and not col.endswith('_diff')]
    split_idx = int(len(df_features) * (1 - test_size))
    train_data = df_features.iloc[:split_idx]
    test_data = df_features.iloc[split_idx:]
    xgb_models = {}
    results = {}

    for target_col in target_cols:
        print(f"\nTraining XGBoost for {target_col}...")
        X_train = train_data[feature_cols].fillna(0)
        y_train = train_data[target_col].fillna(0)
        X_test = test_data[feature_cols].fillna(0)
        y_test = test_data[target_col].fillna(0)
        xgb_model = xgb.XGBRegressor(
            n_estimators=100,
            max_depth=6,
            learning_rate=0.1,
            subsample=0.8,
            colsample_bytree=0.8,
            random_state=42
        )
        xgb_model.fit(X_train, y_train)
        xgb_models[target_col] = xgb_model
        y_pred = xgb_model.predict(X_test)
        mae = mean_absolute_error(y_test, y_pred)
        rmse = np.sqrt(mean_squared_error(y_test, y_pred))
        results[target_col] = {
            'MAE': mae,
            'RMSE': rmse,
            'Feature_Importance': dict(zip(feature_cols, xgb_model.feature_importances_))
        }
        print(f"MAE: {mae:.4f}, RMSE: {rmse:.4f}")

    # --- VAR Training ---
    try:
        var_data = prepare_var_data(df, target_cols)
        var_model = VAR(var_data)
        var_fit = var_model.fit(maxlags=maxlags, ic='aic')
        print(f"VAR model fitted with {var_fit.k_ar} lags")
        print(f"AIC: {var_fit.aic}")
        var_available = True
    except Exception as e:
        print(f"VAR fitting failed: {e}")
        var_fit = None
        var_available = False

    # --- Forecasting ---
    # XGBoost forecast
    df_features = create_time_features(df, df.index.name or 'date')
    df_features = create_lag_features(df_features, target_cols)
    forecasts_xgb = {}
    last_data = df_features.iloc[-1:].copy()
    for step in range(steps_ahead):
        step_forecasts = {}
        for target_col in target_cols:
            if target_col in xgb_models:
                X_pred = last_data[feature_cols].fillna(0)
                pred = xgb_models[target_col].predict(X_pred)[0]
                step_forecasts[target_col] = pred
        for target_col, pred in step_forecasts.items():
            if target_col not in forecasts_xgb:
                forecasts_xgb[target_col] = []
            forecasts_xgb[target_col].append(pred)
            last_data[target_col] = pred

    # VAR forecast
    if var_available:
        try:
            var_forecasts = var_fit.forecast(var_fit.y, steps=steps_ahead)
        except Exception as e:
            print(f"VAR forecasting failed: {e}")
            var_available = False

    # Combine forecasts
    if var_available:
        combined_forecasts = {}
        for i, target_col in enumerate(target_cols):
            if target_col in forecasts_xgb:
                var_vals = var_forecasts[:, i]
                xgb_vals = forecasts_xgb[target_col]
                combined_forecasts[target_col] = [
                    (v + x) / 2 for v, x in zip(var_vals, xgb_vals)
                ]
    else:
        combined_forecasts = forecasts_xgb

    print("\nForecasts for next", steps_ahead, "months:")
    for target_col, values in combined_forecasts.items():
        print(f"{target_col}: {[round(v, 2) for v in values]}")

    return combined_forecasts, results

# Example usage
if __name__ == "__main__":
    # Create sample pharma data
    dates = pd.date_range('2020-01-01', '2024-12-31', freq='M')
    np.random.seed(42)
    n = len(dates)
    calls_data = 1000 + 200 * np.sin(2 * np.pi * np.arange(n) / 12) + np.random.normal(0, 50, n)
    email_data = 800 + 150 * np.sin(2 * np.pi * np.arange(n) / 12 + np.pi/4) + np.random.normal(0, 40, n)
    sales_data = 5000 + 0.3 * calls_data + 0.4 * email_data + np.random.normal(0, 100, n)
    df = pd.DataFrame({
        'date': dates,
        'calls': calls_data,
        'emails': email_data,
        'sales': sales_data
    })
    target_cols = ['calls', 'emails', 'sales']
    pharma_forecast(df, target_cols, steps_ahead=6)
