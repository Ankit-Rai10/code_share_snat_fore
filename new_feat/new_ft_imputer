import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from mlforecast.forecast import MLForecast
from mlforecast.target_transforms import RollingMean
from mlforecast.automl.forecast import AutoMLForecast
import optuna
from xgboost import XGBRegressor

def fill_exogeneous_features_v2(df, feature_names, cv_threshold, val_fh, debug=True):
    unique_id = df['unique_id'].unique()[0]
    columns_imputed = []
    df_summary = pd.DataFrame()

    n_trials = 10
    n_parallel = 1
    seed = 42
    lags_to_consider = [1, 2, 3, 4, 12]
    uni_models = {'xgboost': XGBRegressor(n_estimators=100, random_state=42)}

    for column in feature_names:
        if debug:
            print(df[[column, 'ds']].tail(20))
        series = df[column]
        first_valid_pos1 = series.first_valid_index()
        if debug:
            print('first_valid_pos1 : ', first_valid_pos1)
        series.iloc[:first_valid_pos1] = 0
        nan_pos = series.isna().idxmax() if series.isna().any() else None
        if debug:
            print(column)

        if nan_pos is not None:
            n_nan = series.iloc[nan_pos:].isna().sum()
            if debug:
                print("n_nan : ", n_nan)

            # Prepare dataset
            df_copy = df[['ds', 'unique_id', column]].copy()
            df_copy.rename(columns={column: 'y'}, inplace=True)

            # Split into train, val, test
            train_data = df_copy.iloc[:len(df_copy)-n_nan-val_fh]
            val_data = df_copy.iloc[len(df_copy)-n_nan-val_fh:len(df_copy)-n_nan]
            test_data = df_copy.iloc[len(df_copy)-n_nan:]
            train_holdout_data = pd.concat([train_data, val_data])

            if debug:
                print(f"Train: {train_data.shape}, Val: {val_data.shape}, Test: {test_data.shape}")

            # Define AutoMLForecast config
            def my_init_config(trial):
                return {
                    'lags': lags_to_consider,
                    'date_features': ['month', 'week'],
                    'lag_transforms': {1: [RollingMean(window_size=4)]}
                }

            def my_fit_config(trial):
                return {
                    'static_features': [],
                }

            fcst = AutoMLForecast(
                models=uni_models,
                freq='W-FRI',
                num_threads=n_parallel,
                init_config=my_init_config,
                fit_config=my_fit_config
            ).fit(
                train_data[['ds', 'unique_id', 'y']],
                n_windows=3,
                h=val_fh,
                num_samples=n_trials,
                fitted=True,
                study_kwargs={'sampler': optuna.samplers.TPESampler(seed=seed)}
            )

            # Retrain on full train + val data
            models_to_retrain = {
                model_name: fcst.models_[model_name].models_[model_name]
                for model_name in fcst.models_
            }

            fcst_final = MLForecast(
                models=models_to_retrain,
                lags=lags_to_consider,
                date_features=['month', 'week'],
                freq='W-FRI',
            ).fit(train_holdout_data[['ds', 'unique_id', 'y']], static_features=[], fitted=True)

            forecast_test_df = fcst_final.predict(h=n_nan)
            forecast_test_df['scenario'] = 'Org'

            if debug:
                plt.figure(figsize=(10, 4))
                plt.plot(df_copy['ds'], df_copy['y'], label='Actual')
                plt.plot(forecast_test_df['ds'], forecast_test_df['Org'], label='Forecast')
                plt.axvline(x=df_copy['ds'].iloc[len(df_copy) - n_nan], color='r', linestyle='--', label='Forecast Start')
                plt.legend()
                plt.title(f'{column} - Forecast Imputation')
                plt.grid(True)
                plt.show()

            replicate = forecast_test_df['Org']
            df[column].iloc[nan_pos:] = replicate.values

            df_dummy = pd.DataFrame({'unique_id': unique_id, 'Feature_Name': column, 'n_imputations': n_nan}, index=[0])
            df_summary = pd.concat([df_summary, df_dummy], ignore_index=True)
            columns_imputed.append(column)

    print("output fill exogeneous features for columns: ", columns_imputed)
    if debug:
        print("output summary:", df_summary)
    return df, columns_imputed, df_summary
